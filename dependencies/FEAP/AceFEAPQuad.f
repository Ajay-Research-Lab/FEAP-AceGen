********************************************************************
! Quadrature for triangles, quadrilaterals, tetrahedra and hexahedra
********************************************************************
      subroutine Int1dGauss(gp,wg)

!     1-d Gauss quadrature points & weights

      implicit none
!
      real (kind=8) :: gp(10,10),wg(10,10)
!
! 1 GP
      gp(1,1)= 0.d0
      wg(1,1)= 2.d0

! 2 GP
      gp(2,1)=-0.577350269189626d0
      wg(2,1)= 1.d0
      gp(2,2)= 0.577350269189626d0
      wg(2,2)= 1.d0

! 3 GP
      gp(3,1)=-0.774596669241483d0
      wg(3,1)= 0.555555555555556d0
      gp(3,2)= 0.d0
      wg(3,2)= 0.888888888888889d0
      gp(3,3)= 0.774596669241483d0
      wg(3,3)= 0.555555555555556d0

! 4 GP
      gp(4,1)=-0.861136311594053d0
      wg(4,1)= 0.347854845137454d0
      gp(4,2)=-0.339981043584856d0
      wg(4,2)= 0.652145154862546d0
      gp(4,3)= 0.339981043584856d0
      wg(4,3)= 0.652145154862546d0
      gp(4,4)= 0.861136311594053d0
      wg(4,4)= 0.347854845137454d0

! 5 GP
      gp(5,1)=-0.906179845938664d0
      wg(5,1)= 0.236926885056189d0
      gp(5,2)=-0.538469310105683d0
      wg(5,2)= 0.478628670499366d0
      gp(5,3)= 0.d0
      wg(5,3)= 0.568888888888889d0
      gp(5,4)= 0.538469310105683d0
      wg(5,4)= 0.478628670499366d0
      gp(5,5)= 0.906179845938664d0
      wg(5,5)= 0.236926885056189d0

! 6 GP
      gp(6,1)=-0.932469514203152d0
      wg(6,1)= 0.171324492379170d0
      gp(6,2)=-0.661209386466265d0
      wg(6,2)= 0.360761573048139d0
      gp(6,3)=-0.238619186083197d0
      wg(6,3)= 0.467913934572691d0
      gp(6,4)= 0.238619186083197d0
      wg(6,4)= 0.467913934572691d0
      gp(6,5)= 0.661209386466265d0
      wg(6,5)= 0.360761573048139d0
      gp(6,6)= 0.932469514203152d0
      wg(6,6)= 0.171324492379170d0

! 7 GP
      gp(7,1)=-0.949107912342759d0
      wg(7,1)= 0.129484966168870d0
      gp(7,2)=-0.741531185599394d0
      wg(7,2)= 0.279705391489277d0
      gp(7,3)=-0.405845151377397d0
      wg(7,3)= 0.381830050505119d0
      gp(7,4)= 0.d0
      wg(7,4)= 0.417959183673469d0
      gp(7,5)= 0.405845151377397d0
      wg(7,5)= 0.381830050505119d0
      gp(7,6)= 0.741531185599394d0
      wg(7,6)= 0.279705391489277d0
      gp(7,7)= 0.949107912342759d0
      wg(7,7)= 0.129484966168870d0

! 8 GP
      gp(8,1)=-0.960289856497536d0
      wg(8,1)= 0.101228536290376d0
      gp(8,2)=-0.796666477413627d0
      wg(8,2)= 0.222381034453374d0
      gp(8,3)=-0.525532409916329d0
      wg(8,3)= 0.313706645877887d0
      gp(8,4)=-0.183434642495650d0
      wg(8,4)= 0.362683783378362d0
      gp(8,5)= 0.183434642495650d0
      wg(8,5)= 0.362683783378362d0
      gp(8,6)= 0.525532409916329d0
      wg(8,6)= 0.313706645877887d0
      gp(8,7)= 0.796666477413627d0
      wg(8,7)= 0.222381034453374d0
      gp(8,8)= 0.960289856497536d0
      wg(8,8)= 0.101228536290376d0

! 9 GP
      gp(9,1)=-0.968160239507626d0
      wg(9,1)= 0.081274388361574d0
      gp(9,2)=-0.836031107326636d0
      wg(9,2)= 0.180648160694857d0
      gp(9,3)=-0.613371432700590d0
      wg(9,3)= 0.260610696402935d0
      gp(9,4)=-0.324253423403809d0
      wg(9,4)= 0.312347077040003d0
      gp(9,5)= 0.d0
      wg(9,5)= 0.330239355001260d0
      gp(9,6)= 0.324253423403809d0
      wg(9,6)= 0.312347077040003d0
      gp(9,7)= 0.613371432700590d0
      wg(9,7)= 0.260610696402935d0
      gp(9,8)= 0.836031107326636d0
      wg(9,8)= 0.180648160694857d0
      gp(9,9)= 0.968160239507626d0
      wg(9,9)= 0.081274388361574d0

! 10 GP
      gp(10, 1)=-0.973906528517172d0
      wg(10, 1)= 0.066671344308688d0
      gp(10, 2)=-0.865063366688985d0
      wg(10, 2)= 0.149451349150581d0
      gp(10, 3)=-0.679409568299024d0
      wg(10, 3)= 0.219086362515982d0
      gp(10, 4)=-0.433395394129247d0
      wg(10, 4)= 0.269266719309996d0
      gp(10, 5)=-0.148874338981631d0
      wg(10, 5)= 0.295524224714753d0
      gp(10, 6)= 0.148874338981631d0
      wg(10, 6)= 0.295524224714753d0
      gp(10, 7)= 0.433395394129247d0
      wg(10, 7)= 0.269266719309996d0
      gp(10, 8)= 0.679409568299024d0
      wg(10, 8)= 0.219086362515982d0
      gp(10, 9)= 0.865063366688985d0
      wg(10, 9)= 0.149451349150581d0
      gp(10,10)= 0.973906528517172d0
      wg(10,10)= 0.066671344308688d0

      end subroutine Int1dGauss

      subroutine Int2dQuad(ll,lint,s)

      implicit none
!
      real (kind=8) :: s(4,*)
      real (kind=8) :: gp(10,10),wg(10,10)
      integer       :: k,m,ll,kk,lint

!     Set 1-d Gauss points and weights
      call Int1dGauss(gp,wg)

!     Total number of points
      lint=ll*ll

!     k = index for y-coordinate
      do k=1,ll
        kk=(k-1)*ll
!       m = index for x-coordinate
        do m=1,ll
          s(1,kk+m)=gp(ll,m)
          s(2,kk+m)=gp(ll,k)
          s(4,kk+m)=wg(ll,m)*wg(ll,k)
        end do ! m
      end do ! k

      return
      end

********************************************************************
! Quadrature points for 3D Hexahedra
********************************************************************
      subroutine Int3dHex(ll,lint,s)

      implicit none
!
      real (kind=8) :: s(4,*)
      real (kind=8) :: gp(10,10),wg(10,10)
      integer       :: j,k,m,ll,jj,kk,lint

!     Set 1-d Gauss points and weights
      call Int1dGauss(gp,wg)

!     Total number of points
      lint=ll*ll*ll

!     j = index for z-coordinate
      do j=1,ll
        jj=(j-1)*ll*ll
!       k = index for y-coordinate
        do k=1,ll
          kk=jj + (k-1)*ll
!         m = index for x-coordinate
          do m=1,ll
            s(1,kk+m)=gp(ll,m)
            s(2,kk+m)=gp(ll,k)
            s(3,kk+m)=gp(ll,j)
            s(4,kk+m)=wg(ll,m)*wg(ll,k)*wg(ll,j)
          end do ! m
        end do ! k
      end do ! j

      end subroutine Int3dHex

********************************************************************
! Quadrature points for 2D Triangles
********************************************************************
      subroutine Int2dTri(ll,lint,s)

      implicit none
!
      real (kind=8) :: s(3,*)
      integer       :: ll,lint

      if(ll.eq.1) then          ! 1 point quadrature rule
        lint = 1
        s(1,1) = 1.d0/3.d0
        s(2,1) = 1.d0/3.d0
        s(3,1) = 0.5d0
      elseif(ll.eq.2) then      ! 3 point (nodal) quadrature rule
        lint = 3
        s(1,1) = 0.5d0
        s(2,1) = 0.5d0
        s(3,1) = 1.d0/6.d0
        s(1,2) = 0.d0
        s(2,2) = 0.5d0
        s(3,2) = 1.d0/6.d0
        s(1,3) = 0.5d0
        s(2,3) = 0.d0
        s(3,3) = 1.d0/6.d0
      elseif(ll.eq.3) then      ! 3 point quadrature rule
        lint = 3
        s(1,1) = 1.d0/6.d0
        s(2,1) = 1.d0/6.d0
        s(3,1) = 1.d0/6.d0
        s(1,2) = 2.d0/3.d0
        s(2,2) = 1.d0/6.d0
        s(3,2) = 1.d0/6.d0
        s(1,3) = 1.d0/6.d0
        s(2,3) = 2.d0/3.d0
        s(3,3) = 1.d0/6.d0
      elseif(ll.eq.4) then      ! 4 point quadrature rule
        lint = 4
        s(1,1) = 1.d0/3.d0
        s(2,1) = 1.d0/3.d0
        s(3,1) = -27.d0/96.d0
        s(1,2) = 1.d0/5.d0
        s(2,2) = 1.d0/5.d0
        s(3,2) = 25.d0/96.d0
        s(1,3) = 3.d0/5.d0
        s(2,3) = 1.d0/5.d0
        s(3,3) = 25.d0/96.d0
        s(1,4) = 1.d0/5.d0
        s(2,4) = 3.d0/5.d0
        s(3,4) = 25.d0/96.d0
      elseif(ll.eq.5) then      ! 6 point (nodal) quadrature rule
        lint = 6
        s(1,1) =  0.d0
        s(2,1) =  0.d0
        s(3,1) =  1.d0/3.d0
        s(1,2) =  1.d0
        s(2,2) =  0.d0
        s(3,2) =  1.d0/3.d0
        s(1,3) =  0.d0
        s(2,3) =  1.d0
        s(3,3) =  1.d0/3.d0
        s(1,4) =  0.5d0
        s(2,4) =  0.d0
        s(3,4) =  1.d0/3.d0
        s(1,5) =  0.5d0
        s(2,5) =  0.5d0
        s(3,5) =  1.d0/3.d0
        s(1,6) =  0.d0
        s(2,6) =  0.5d0
        s(3,6) =  1.d0/3.d0
      elseif(ll.eq.6) then      ! 6 point quadrature rule
        lint = 6
        s(1,1) = 0.091576213509771d0
        s(2,1) = 0.091576213509771d0
        s(3,1) = 0.109951743655322d0
        s(1,2) = 0.816847572980459d0
        s(2,2) = 0.091576213509771d0
        s(3,2) = 0.109951743655322d0
        s(1,3) = 0.091576213509771d0
        s(2,3) = 0.816847572980459d0
        s(3,3) = 0.109951743655322d0
        s(1,4) = 0.445948490915965d0
        s(2,4) = 0.445948490915965d0
        s(3,4) = 0.223381589678011d0
        s(1,5) = 0.108103018168070d0
        s(2,5) = 0.445948490915965d0
        s(3,5) = 0.223381589678011d0
        s(1,6) = 0.445948490915965d0
        s(2,6) = 0.108103018168070d0
        s(3,6) = 0.223381589678011d0
      elseif(ll.eq.6) then      ! 12 point quadrature rule
        lint = 12
        s(1, 1) = 0.063089014491502d0
        s(2, 1) = 0.063089014491502d0
        s(3, 1) = 0.050844906370207d0
        s(1, 2) = 0.873821971016996d0
        s(2, 2) = 0.063089014491502d0
        s(3, 2) = 0.050844906370207d0
        s(1, 3) = 0.063089014491502d0
        s(2, 3) = 0.873821971016996d0
        s(3, 3) = 0.050844906370207d0
        s(1, 4) = 0.249286745170910d0
        s(2, 4) = 0.249286745170910d0
        s(3, 4) = 0.116786275726379d0
        s(1, 5) = 0.501426509658179d0
        s(2, 5) = 0.249286745170910d0
        s(3, 5) = 0.116786275726379d0
        s(1, 6) = 0.249286745170910d0
        s(2, 6) = 0.501426509658179d0
        s(3, 6) = 0.116786275726379d0
        s(1, 7) = 0.310352451033785d0
        s(2, 7) = 0.053145049844816d0
        s(3, 7) = 0.082851075618374d0
        s(1, 8) = 0.053145049844816d0
        s(2, 8) = 0.310352451033785d0
        s(3, 8) = 0.082851075618374d0
        s(1, 9) = 0.636502499121399d0
        s(2, 9) = 0.053145049844816d0
        s(3, 9) = 0.082851075618374d0
        s(1,10) = 0.636502499121399d0
        s(2,10) = 0.310352451033785d0
        s(3,10) = 0.082851075618374d0
        s(1,11) = 0.053145049844816d0
        s(2,11) = 0.636502499121399d0
        s(3,11) = 0.082851075618374d0
        s(1,12) = 0.310352451033785d0
        s(2,12) = 0.636502499121399d0
        s(3,12) = 0.082851075618374d0
      endif

      end subroutine Int2dTri

********************************************************************
! Quadrature points for 3D Tetrahedron
********************************************************************
      subroutine Int3dTet(ll,lint,s)

      implicit none
!
      real (kind=8) :: s(4,*),a,b
      integer       :: ll,lint,i

      if(ll.eq.1) then          ! 1 point quadrature rule
        lint = 1
        do i = 1,3
          s(i,1) = 0.25d0
        end do
        s(4,1) = 1.d0/6.d0
      elseif(ll.eq.2) then      ! 4 point quadrature rule
        lint = 4
        a = (5.d0+3.d0*dsqrt(5.d0))/20.d0
        b = (5.d0-dsqrt(5.d0))/20.d0
        s(1,1) = b
        s(2,1) = b
        s(3,1) = b
        s(1,2) = a
        s(2,2) = b
        s(3,2) = b
        s(1,3) = b
        s(2,3) = a
        s(3,3) = b
        s(1,4) = b
        s(2,4) = b
        s(3,4) = a
        do i = 1,4
          s(4,i) = 1.d0/24.d0
        end do
      elseif(ll.eq.3) then      ! 5 point quadrature rule
        lint = 5
        s(1,1) = 0.25d0
        s(2,1) = 0.25d0
        s(3,1) = 0.25d0
        s(4,1) = -2.d0/15.d0
        s(1,2) = 1.d0/6.d0
        s(2,2) = 1.d0/6.d0
        s(3,2) = 1.d0/6.d0
        s(4,2) = 3.d0/40.d0
        s(1,3) = 1.d0/6.d0
        s(2,3) = 1.d0/6.d0
        s(3,3) = 0.5d0
        s(4,3) = 3.d0/40.d0
        s(1,4) = 1.d0/6.d0
        s(2,4) = 0.5d0
        s(3,4) = 1.d0/6.d0
        s(4,4) = 3.d0/40.d0
        s(1,5) = 0.5d0
        s(2,5) = 1.d0/6.d0
        s(3,5) = 1.d0/6.d0
        s(4,5) = 3.d0/40.d0
      elseif(ll.eq.4) then      ! 11 point quadrature rule
        lint = 11
        s(1,1) = 0.d0
        s(2,1) = 0.d0
        s(3,1) = 0.d0
        s(4,1) = 1.d0/360.d0
        s(1,2) = 1.d0
        s(2,2) = 0.d0
        s(3,2) = 0.d0
        s(4,2) = 1.d0/360.d0
        s(1,3) = 0.d0
        s(2,3) = 1.d0
        s(3,3) = 0.d0
        s(4,3) = 1.d0/360.d0
        s(1,4) = 0.d0
        s(2,4) = 0.d0
        s(3,4) = 1.d0
        s(4,4) = 1.d0/360.d0
        s(1,5) = 0.5d0
        s(2,5) = 0.d0
        s(3,5) = 0.d0
        s(4,5) = 1.d0/90.d0
        s(1,6) = 0.5d0
        s(2,6) = 0.5d0
        s(3,6) = 0.d0
        s(4,6) = 1.d0/90.d0
        s(1,7) = 0.d0
        s(2,7) = 0.5d0
        s(3,7) = 0.5d0
        s(4,7) = 1.d0/90.d0
        s(1,8) = 0.d0
        s(2,8) = 0.d0
        s(3,8) = 0.5d0
        s(4,8) = 1.d0/90.d0
        s(1,9) = 0.5d0
        s(2,9) = 0.d0
        s(3,9) = 0.5d0
        s(4,9) = 1.d0/90.d0
        s(1,10) = 0.d0
        s(2,10) = 0.5d0
        s(3,10) = 0.d0
        s(4,10) = 1.d0/90.d0
        s(1,11) = 0.25d0
        s(2,11) = 0.25d0
        s(3,11) = 0.25d0
        s(4,11) = 4.d0/45.d0
      elseif(ll.eq.6) then
        lint = 24
        s(1,1) = 2.146028712591517d-01
        s(2,1) = 2.146028712591517d-01
        s(3,1) = 3.561913862225449d-01
        s(4,1) = 0.00665379170969464506d0
        s(1,2) = 2.146028712591517d-01
        s(2,2) = 2.146028712591517d-01
        s(3,2) = 2.146028712591517d-01
        s(4,2) = 0.00665379170969464506d0
        s(1,3) = 3.561913862225449d-01
        s(2,3) = 2.146028712591517d-01
        s(3,3) = 2.146028712591517d-01
        s(4,3) = 0.00665379170969464506d0
        s(1,4) = 2.146028712591517d-01
        s(2,4) = 3.561913862225449d-01
        s(3,4) = 2.146028712591517d-01
        s(4,4) = 0.00665379170969464506d0
        s(1,5) = 4.067395853461134d-02
        s(2,5) = 4.067395853461134d-02
        s(3,5) = 8.779781243961660d-01
        s(4,5) = 0.0016795351758867762d0
        s(1,6) = 4.067395853461134d-02
        s(2,6) = 4.067395853461134d-02
        s(3,6) = 4.067395853461134d-02
        s(4,6) = 0.0016795351758867762d0
        s(1,7) = 8.779781243961660d-01
        s(2,7) = 4.067395853461134d-02
        s(3,7) = 4.067395853461134d-02
        s(4,7) = 0.0016795351758867762d0
        s(1,8) = 4.067395853461134d-02
        s(2,8) = 8.779781243961660d-01
        s(3,8) = 4.067395853461134d-02
        s(4,8) = 0.0016795351758867762d0
        s(1,9) = 3.223378901422757d-01
        s(2,9) = 3.223378901422757d-01
        s(3,9) = 3.298632957317306d-02
        s(4,9) = 0.00922619692394239843d0
        s(1,10) = 3.223378901422757d-01
        s(2,10) = 3.223378901422757d-01
        s(3,10) = 3.223378901422757d-01
        s(4,10) = 0.00922619692394239843d0
        s(1,11) = 3.298632957317306d-02
        s(2,11) = 3.223378901422757d-01
        s(3,11) = 3.223378901422757d-01
        s(4,11) = 0.00922619692394239843d0
        s(1,12) = 3.223378901422757d-01
        s(2,12) = 3.298632957317306d-02
        s(3,12) = 3.223378901422757d-01
        s(4,12) = 0.00922619692394239843d0
        s(1,13) = 6.366100187501753d-02
        s(2,13) = 2.696723314583159d-01
        s(3,13) = 6.030056647916491d-01
        s(4,13) = 0.00803571428571428248d0
        s(1,14) = 6.366100187501753d-02
        s(2,14) = 6.030056647916491d-01
        s(3,14) = 2.696723314583159d-01
        s(4,14) = 0.00803571428571428248d0
        s(1,15) = 2.696723314583159d-01
        s(2,15) = 6.366100187501753d-02
        s(3,15) = 6.030056647916491d-01
        s(4,15) = 0.00803571428571428248d0
        s(1,16) = 6.030056647916491d-01
        s(2,16) = 6.366100187501753d-02
        s(3,16) = 2.696723314583159d-01
        s(4,16) = 0.00803571428571428248d0
        s(1,17) = 2.696723314583159d-01
        s(2,17) = 6.030056647916491d-01
        s(3,17) = 6.366100187501753d-02
        s(4,17) = 0.00803571428571428248d0
        s(1,18) = 6.030056647916491d-01
        s(2,18) = 2.696723314583159d-01
        s(3,18) = 6.366100187501753d-02
        s(4,18) = 0.00803571428571428248d0
        s(1,19) = 6.030056647916491d-01
        s(2,19) = 6.366100187501753d-02
        s(3,19) = 6.366100187501753d-02
        s(4,19) = 0.00803571428571428248d0
        s(1,20) = 2.696723314583159d-01
        s(2,20) = 6.366100187501753d-02
        s(3,20) = 6.366100187501753d-02
        s(4,20) = 0.00803571428571428248d0
        s(1,21) = 6.366100187501753d-02
        s(2,21) = 6.030056647916491d-01
        s(3,21) = 6.366100187501753d-02
        s(4,21) = 0.00803571428571428248d0
        s(1,22) = 6.366100187501753d-02
        s(2,22) = 2.696723314583159d-01
        s(3,22) = 6.366100187501753d-02
        s(4,22) = 0.00803571428571428248d0
        s(1,23) = 6.366100187501753d-02
        s(2,23) = 6.366100187501753d-02
        s(3,23) = 6.030056647916491d-01
        s(4,23) = 0.00803571428571428248d0
        s(1,24) = 6.366100187501753d-02
        s(2,24) = 6.366100187501753d-02
        s(3,24) = 2.696723314583159d-01
        s(4,24) = 0.00803571428571428248d0
      end if

      end subroutine Int3dTet
