!**************************************************************
!* AceGen    7.205 MacOSX (15 Jan 21)                         *
!*           Co. J. Korelc  2020           15 Jul 21 10:20:07 *
!**************************************************************
! User     : Full professional version
! Notebook : thermalSteady 3D
! Evaluation time                 : 17 s    Mode  : Optimal
! Number of formulae              : 394     Method: Automatic
! Subroutine                      : elmt23_ISW01 size: 57
! Subroutine                      : elmt23_ISW03 size: 4539
! Subroutine                      : elmt23_ISW05 size: 450
! Subroutine                      : elmt23_ISW06 size: 2197
! Subroutine                      : elmt23_ISW09 size: 450
! Total size of Mathematica  code : 7693 subexpressions
! Total size of Fortran code      : 25085 bytes

      subroutine elmt23 (d,ul,xl,ix,tl,s,p,ndf,ndm,nst,isw)

!      * * F E A P * * A Finite Element Analysis Program

!....  Copyright (c) 1984-2021: Regents of the University of California
!                               All rights reserved

!-----[--.----+----.----+----.-----------------------------------------]
!     Modification log                                Date (dd/mm/year)
!-----[--.----+----.----+----.-----------------------------------------]
!     Purpose:

!     Inputs:
!       d(*)          - Material set parameters
!       ul(ndf,nen,*) - Solution parameters
!       xl(ndm,nen)   - Element nodal coordinates
!       ix(nen1)      - Element global node numbers
!       tl(nen)       - Element vector (e.g., nodal temperatures)
!       ndf           - Maximum no dof's/node
!       ndm           - Mesh spatial dimension
!       nst           - Element matrix/vector dimension
!       isw           - Switch parameter (set by input commands)

!     Outputs:
!       s(nst,nst,2)  - Element matrix (stiffness, mass, etc.)
!       p(nst,2)      - Element vector (residual, lump mass, etc.)
!-----[--.----+----.----+----.-----------------------------------------]

      implicit none

      include 'debugs.h'
      include 'bdata.h'
      include 'cdata.h'
      include 'eldata.h'
      include 'eltran.h'
      include 'hdata.h'
      include 'iofile.h'
      include 'umac1.h'                 ! utx(1)
      include 'comblk.h'

      integer       ::  ndf             ! Max DOF's/node
      integer       ::  ndm             ! Mesh spatial dimention
      integer       ::  nst             ! Matrix 's' dimension
      integer       ::  isw             ! Switch for solution steps
      integer       ::  ix(*)           ! Element global nodes
      real (kind=8) ::  d(*)            ! Material set parameters
      real (kind=8) ::  ul(ndf,nen,*)   ! Local nodal solutions
      real (kind=8) ::  xl(ndm,*)       ! Local nodal coordinates
      real (kind=8) ::  tl(*)           ! Local nodal load array
      real (kind=8) ::  s(nst,nst,*)    ! Element matrix
      real (kind=8) ::  p(ndf,*)        ! Element vector    
      logical       ::  symmetric       ! Is matrix symmetric
      logical       ::  errck           ! For error in inputs

      character (len=50) :: datades(3)
      logical       ::  pinput
      integer       ::  dofacegen,ngpo
      real (kind=8) ::  td(10)
      real (kind=8) ::  v(1258)   ! AceGen Storage
      real (kind=8), allocatable :: ua(:,:)    ! AceGen Storage
      real (kind=8), allocatable :: k(:,:)     ! AceGen stiffness
      real (kind=8), allocatable :: c(:,:)     ! AceGen damping
      real (kind=8), allocatable :: m(:,:)     ! AceGen mass
      real (kind=8), allocatable :: r(:)       ! AceGen residual

      integer       :: i,j,kk,n                 ! Loop variables
      real (kind=8) :: gp(4,25) 

!     Limits: 10 PDE; 30 DOF total
      integer       :: npde, nelu(10),du(10),dofu(10,30)
      integer       :: hist1, hist3

      save

      symmetric=.true.

      if(isw.ne.1) then

!       Read number of PDEs
        npde = nint(d(100))

      endif
 
      if(isw.lt.0) then
        utx(1) = "elmt23"

      elseif(isw.eq.1) then                ! Input material set data
        pstyp = ndm                        ! Sets plot dimension (1,2,3)

!       Read number pdes 
        nelu(:)   = 0
        du(:)     = 0
        dofu(:,:) = 0
        call elmt23_ISW01(v,npde,du,nelu,hist1,hist3)

!       Build 'dofu'
        kk = 0
        do i = 1,npde
          do j = 1, du(i)
            kk = kk + 1
            dofu(i,j) = kk
          end do ! j
        end do ! i

!       Initialize number of history variables
        nh1 = hist1
        nh3 = hist3

!       Save number of pde
        d(100) = dble(npde)

!       Build size of AceGen arrays
        dofacegen = 0
        do n = 1,npde
          dofacegen = dofacegen + nelu(n)*du(n)
        end do ! n

        if( .not.allocated(r) ) then
          if(debug) write(*,*) ' --> Allocate: DOFACEGEN =',dofacegen
          allocate( r(dofacegen) )
          allocate( m(dofacegen,dofacegen) )
          allocate( c(dofacegen,dofacegen) )
          allocate( k(dofacegen,dofacegen) )
          allocate( ua(6,dofacegen) )
        endif

!       Material properties
        errck = pinput(td,3)
        d(1:3) = td(1:3)

!       Output material set data
        
        datades(1)="rho0 -Density"

        datades(2)="kappa -Thermal conductivity"

        datades(3)="Cv -Heat capacity"

        write(iow,"(10x,f15.5,A3,A)")
     #     (d(i)," = ",datades(i),i=1,3)

!       Set active dof's
        call SB_activedofs(du,dofu,nelu,npde,ix,ndf)

!       Set quadrature points
        nel = maxval(nelu(1:npde))
        call SB_Int(ndm, nel, ngpo,gp)

      elseif(isw.eq.3 .or.isw.eq.6) then   ! Compute residual/tangent

!       Map dofs
        call SB_ua_set(ul,ndf,nen,ua,du,dofu,nelu,npde)

        if(isw.eq.3) then

!         Initialize element arrays
          k(:,:) = 0.0d0
          c(:,:) = 0.0d0
          m(:,:) = 0.0d0
          r(:)   = 0.0d0

!         Call the routine for ISW=3
          call elmt23_ISW03(v,d,xl,ua,k,c,m,r,hr(nh1),hr(nh2),gp,ngpo)

!         Print values for debug mode
          if(debug) then
            call mprint(k,dofacegen,dofacegen,dofacegen,'ACE_K')
            call mprint(c,dofacegen,dofacegen,dofacegen,'ACE_C')
            call mprint(m,dofacegen,dofacegen,dofacegen,'ACE_M')
            call mprint(r,1,dofacegen,1,'ACE_R')
          endif

!         Combine tangent
          k(:,:) = k(:,:)*ctan(1) + c(:,:)*ctan(2) + m(:,:)*ctan(3)

!         Fill symmetric part
          if(symmetric) then
            do j = 1,dofacegen
              do i = j+1,dofacegen
                k(i,j) = k(j,i)
              end do ! i
            end do ! j
          end if

!         Map to FEAP storage
          call SB_ace2nst(k,r,dofacegen,s,p,nst,du,dofu,nelu,npde,isw)

        elseif(isw.eq.6) then

!         Initialize element arrays
          r(:)   = 0.0d0

!         Call the routine for ISW=6
          call elmt23_ISW06(v,d,xl,ua,r,hr(nh1),hr(nh2),gp,ngpo)

!         Map to FEAP storage
          call SB_ace2nst(k,r,dofacegen,s,p,nst,du,dofu,nelu,npde,isw)

        endif

      elseif(isw.eq.4 .or.isw.eq.8) then   ! Output/plot element data

      elseif(isw.eq.5) then                ! Compute mass matrix

!       Map dofs
        call SB_ua_set(ul,ndf,nen,ua,du,dofu,nelu,npde)

!       Initialize element arrays
        m(:,:) = 0.0d0
        r(:)   = 0.0d0

!       Call the routine for ISW=5
        call elmt23_ISW05(v,d,xl,ua,m,r,hr(nh1),hr(nh2),gp,ngpo)

      elseif(isw.eq.9) then                ! Compute damping matrix

!       Map dofs
        call SB_ua_set(ul,ndf,nen,ua,du,dofu,nelu,npde)

!       Initialize element arrays
        c(:,:) = 0.0d0
        r(:)   = 0.0d0

!       Call the routine for ISW=9
        call elmt23_ISW09(v,d,xl,ua,c,r,hr(nh1),hr(nh2),gp,ngpo)

      endif

      end subroutine elmt23


!******************* S U B R O U T I N E **********************
      SUBROUTINE elmt23_ISW01(v,npde,du,nelu,hist1,hist3)
      IMPLICIT NONE
      include 'sms.h'
      INTEGER npde,du(10),nelu(10),hist1,hist3
      DOUBLE PRECISION v(1258)
      npde=(1)
      du(1)=(1)
      nelu(1)=(8)
      hist1=(0)
      hist3=(0)
      END

!******************* S U B R O U T I N E **********************
      SUBROUTINE elmt23_ISW03(v,d,xl,ul,s,c,m,p,ht,hp,gp,ngpo)
      IMPLICIT NONE
      include 'sms.h'
      INTEGER ngpo,i6
      DOUBLE PRECISION v(1258),d(3),xl(3,8),ul(6,8),s(8,8),c
     &(8,8),m(8,8),p(8),ht(0),hp(0),gp(4,8)
      v(89)=ul(1,8)
      v(88)=ul(1,7)
      v(87)=ul(1,6)
      v(86)=ul(1,5)
      v(85)=ul(1,4)
      v(84)=ul(1,3)
      v(83)=ul(1,2)
      v(82)=ul(1,1)
      v(33)=xl(3,8)
      v(32)=xl(2,8)
      v(31)=xl(1,8)
      v(30)=xl(3,7)
      v(1096)=v(30)-v(33)
      v(29)=xl(2,7)
      v(1100)=v(29)-v(32)
      v(28)=xl(1,7)
      v(1104)=v(28)-v(31)
      v(27)=xl(3,6)
      v(1084)=v(27)-v(30)
      v(26)=xl(2,6)
      v(1088)=v(26)-v(29)
      v(25)=xl(1,6)
      v(1092)=v(25)-v(28)
      v(24)=xl(3,5)
      v(1095)=-v(24)+v(27)
      v(1083)=v(24)-v(33)
      v(23)=xl(2,5)
      v(1099)=-v(23)+v(26)
      v(1087)=v(23)-v(32)
      v(22)=xl(1,5)
      v(1103)=-v(22)+v(25)
      v(1091)=v(22)-v(31)
      v(21)=xl(3,4)
      v(1072)=v(21)-v(33)
      v(20)=xl(2,4)
      v(1076)=v(20)-v(32)
      v(19)=xl(1,4)
      v(1080)=v(19)-v(31)
      v(18)=xl(3,3)
      v(1094)=v(18)-v(21)
      v(1071)=v(18)-v(30)
      v(17)=xl(2,3)
      v(1098)=v(17)-v(20)
      v(1075)=v(17)-v(29)
      v(16)=xl(1,3)
      v(1102)=v(16)-v(19)
      v(1079)=v(16)-v(28)
      v(15)=xl(3,2)
      v(1082)=v(15)-v(18)
      v(1070)=v(15)-v(27)
      v(14)=xl(2,2)
      v(1086)=v(14)-v(17)
      v(1074)=v(14)-v(26)
      v(13)=xl(1,2)
      v(1090)=v(13)-v(16)
      v(1078)=v(13)-v(25)
      v(12)=xl(3,1)
      v(1093)=-v(12)+v(15)
      v(1081)=v(12)-v(21)
      v(1069)=v(12)-v(24)
      v(11)=xl(2,1)
      v(1097)=-v(11)+v(14)
      v(1085)=v(11)-v(20)
      v(1073)=v(11)-v(23)
      v(10)=xl(1,1)
      v(1101)=-v(10)+v(13)
      v(1089)=v(10)-v(19)
      v(1077)=v(10)-v(22)
      DO i6=1,ngpo
       v(106)=gp(1,i6)
       v(117)=1d0-v(106)
       v(113)=1d0+v(106)
       v(107)=gp(2,i6)
       v(123)=1d0+v(107)
       v(132)=v(123)/8d0
       v(140)=-(v(117)*v(132))
       v(139)=-(v(113)*v(132))
       v(119)=1d0-v(107)
       v(133)=v(119)/8d0
       v(138)=-(v(113)*v(133))
       v(136)=-(v(117)*v(133))
       v(151)=v(1069)*v(136)+v(1070)*v(138)+v(1071)*v(139)+v(1072)*v
     & (140)
       v(148)=v(1073)*v(136)+v(1074)*v(138)+v(1075)*v(139)+v(1076)*v
     & (140)
       v(145)=v(1077)*v(136)+v(1078)*v(138)+v(1079)*v(139)+v(1080)*v
     & (140)
       v(108)=gp(3,i6)
       v(131)=(1d0+v(108))/8d0
       v(142)=-(v(113)*v(131))
       v(141)=-(v(117)*v(131))
       v(126)=v(123)*v(131)
       v(121)=v(119)*v(131)
       v(134)=(1d0-v(108))/8d0
       v(137)=-(v(113)*v(134))
       v(135)=-(v(117)*v(134))
       v(150)=v(1081)*v(135)+v(1082)*v(137)+v(1083)*v(141)+v(1084)*v
     & (142)
       v(147)=v(1085)*v(135)+v(1086)*v(137)+v(1087)*v(141)+v(1088)*v
     & (142)
       v(1065)=-(v(148)*v(150))+v(147)*v(151)
       v(144)=v(1089)*v(135)+v(1090)*v(137)+v(1091)*v(141)+v(1092)*v
     & (142)
       v(116)=v(123)*v(134)
       v(111)=v(119)*v(134)
       v(149)=v(1093)*v(111)+v(1094)*v(116)+v(1095)*v(121)+v(1096)*v
     & (126)
       v(146)=v(1097)*v(111)+v(1098)*v(116)+v(1099)*v(121)+v(1100)*v
     & (126)
       v(1067)=-(v(147)*v(149))+v(146)*v(150)
       v(1066)=v(148)*v(149)-v(146)*v(151)
       v(143)=v(1101)*v(111)+v(1102)*v(116)+v(1103)*v(121)+v(1104)*v
     & (126)
       v(152)=v(1065)*v(143)+v(1066)*v(144)+v(1067)*v(145)
       v(1068)=d(2)*gp(4,i6)*v(152)
       v(162)=-(v(1065)/v(152))
       v(225)=-(v(126)*v(162))
       v(216)=v(121)*v(162)
       v(207)=-(v(116)*v(162))
       v(198)=v(111)*v(162)
       v(163)=(-(v(145)*v(150))+v(144)*v(151))/v(152)
       v(227)=-(v(126)*v(163))
       v(218)=v(121)*v(163)
       v(209)=-(v(116)*v(163))
       v(200)=v(111)*v(163)
       v(164)=(v(145)*v(147)-v(144)*v(148))/v(152)
       v(229)=-(v(126)*v(164))
       v(220)=v(121)*v(164)
       v(211)=-(v(116)*v(164))
       v(202)=v(111)*v(164)
       v(165)=v(1066)/v(152)
       v(186)=v(134)*v(165)
       v(174)=v(131)*v(165)
       v(166)=(-(v(145)*v(149))+v(143)*v(151))/v(152)
       v(189)=v(134)*v(166)
       v(176)=v(131)*v(166)
       v(167)=(v(145)*v(146)-v(143)*v(148))/v(152)
       v(192)=v(134)*v(167)
       v(178)=v(131)*v(167)
       v(168)=v(1067)/v(152)
       v(187)=v(133)*v(168)
       v(180)=v(132)*v(168)
       v(169)=(v(144)*v(149)-v(143)*v(150))/v(152)
       v(190)=v(133)*v(169)
       v(182)=v(132)*v(169)
       v(170)=(-(v(144)*v(146))+v(143)*v(147))/v(152)
       v(193)=v(133)*v(170)
       v(184)=v(132)*v(170)
       v(171)=v(174)+v(180)
       v(172)=v(176)+v(182)
       v(173)=v(178)+v(184)
       v(175)=-v(174)+v(187)
       v(177)=-v(176)+v(190)
       v(179)=-v(178)+v(193)
       v(181)=-v(180)+v(186)
       v(183)=-v(182)+v(189)
       v(185)=-v(184)+v(192)
       v(188)=-v(186)-v(187)
       v(191)=-v(189)-v(190)
       v(194)=-v(192)-v(193)
       v(195)=v(117)*v(188)+v(198)
       v(196)=v(117)*v(191)+v(200)
       v(197)=v(117)*v(194)+v(202)
       v(199)=v(113)*v(188)-v(198)
       v(201)=v(113)*v(191)-v(200)
       v(203)=v(113)*v(194)-v(202)
       v(289)=v(1068)*(v(195)*v(199)+v(196)*v(201)+v(197)*v(203))
       v(204)=v(113)*v(181)+v(207)
       v(205)=v(113)*v(183)+v(209)
       v(206)=v(113)*v(185)+v(211)
       v(297)=v(1068)*(v(199)*v(204)+v(201)*v(205)+v(203)*v(206))
       v(290)=v(1068)*(v(195)*v(204)+v(196)*v(205)+v(197)*v(206))
       v(208)=v(117)*v(181)-v(207)
       v(210)=v(117)*v(183)-v(209)
       v(212)=v(117)*v(185)-v(211)
       v(304)=v(1068)*(v(204)*v(208)+v(205)*v(210)+v(206)*v(212))
       v(298)=v(1068)*(v(199)*v(208)+v(201)*v(210)+v(203)*v(212))
       v(291)=v(1068)*(v(195)*v(208)+v(196)*v(210)+v(197)*v(212))
       v(213)=v(117)*v(175)+v(216)
       v(214)=v(117)*v(177)+v(218)
       v(215)=v(117)*v(179)+v(220)
       v(310)=v(1068)*(v(208)*v(213)+v(210)*v(214)+v(212)*v(215))
       v(305)=v(1068)*(v(204)*v(213)+v(205)*v(214)+v(206)*v(215))
       v(299)=v(1068)*(v(199)*v(213)+v(201)*v(214)+v(203)*v(215))
       v(292)=v(1068)*(v(195)*v(213)+v(196)*v(214)+v(197)*v(215))
       v(217)=v(113)*v(175)-v(216)
       v(219)=v(113)*v(177)-v(218)
       v(221)=v(113)*v(179)-v(220)
       v(315)=v(1068)*(v(213)*v(217)+v(214)*v(219)+v(215)*v(221))
       v(311)=v(1068)*(v(208)*v(217)+v(210)*v(219)+v(212)*v(221))
       v(306)=v(1068)*(v(204)*v(217)+v(205)*v(219)+v(206)*v(221))
       v(300)=v(1068)*(v(199)*v(217)+v(201)*v(219)+v(203)*v(221))
       v(293)=v(1068)*(v(195)*v(217)+v(196)*v(219)+v(197)*v(221))
       v(222)=v(113)*v(171)+v(225)
       v(223)=v(113)*v(172)+v(227)
       v(224)=v(113)*v(173)+v(229)
       v(319)=v(1068)*(v(217)*v(222)+v(219)*v(223)+v(221)*v(224))
       v(316)=v(1068)*(v(213)*v(222)+v(214)*v(223)+v(215)*v(224))
       v(312)=v(1068)*(v(208)*v(222)+v(210)*v(223)+v(212)*v(224))
       v(307)=v(1068)*(v(204)*v(222)+v(205)*v(223)+v(206)*v(224))
       v(301)=v(1068)*(v(199)*v(222)+v(201)*v(223)+v(203)*v(224))
       v(294)=v(1068)*(v(195)*v(222)+v(196)*v(223)+v(197)*v(224))
       v(226)=v(117)*v(171)-v(225)
       v(231)=v(195)*v(82)+v(199)*v(83)+v(204)*v(84)+v(208)*v(85)+v
     & (213)*v(86)+v(217)*v(87)+v(222)*v(88)+v(226)*v(89)
       v(228)=v(117)*v(172)-v(227)
       v(232)=v(196)*v(82)+v(201)*v(83)+v(205)*v(84)+v(210)*v(85)+v
     & (214)*v(86)+v(219)*v(87)+v(223)*v(88)+v(228)*v(89)
       v(230)=v(117)*v(173)-v(229)
       v(322)=v(1068)*(v(222)*v(226)+v(223)*v(228)+v(224)*v(230))
       v(320)=v(1068)*(v(217)*v(226)+v(219)*v(228)+v(221)*v(230))
       v(317)=v(1068)*(v(213)*v(226)+v(214)*v(228)+v(215)*v(230))
       v(313)=v(1068)*(v(208)*v(226)+v(210)*v(228)+v(212)*v(230))
       v(308)=v(1068)*(v(204)*v(226)+v(205)*v(228)+v(206)*v(230))
       v(302)=v(1068)*(v(199)*v(226)+v(201)*v(228)+v(203)*v(230))
       v(295)=v(1068)*(v(195)*v(226)+v(196)*v(228)+v(197)*v(230))
       v(233)=v(197)*v(82)+v(203)*v(83)+v(206)*v(84)+v(212)*v(85)+v
     & (215)*v(86)+v(221)*v(87)+v(224)*v(88)+v(230)*v(89)
       p(1)=p(1)+v(1068)*(v(195)*v(231)+v(196)*v(232)+v(197)*v(233))
       p(2)=p(2)+v(1068)*(v(199)*v(231)+v(201)*v(232)+v(203)*v(233))
       p(3)=p(3)+v(1068)*(v(204)*v(231)+v(205)*v(232)+v(206)*v(233))
       p(4)=p(4)+v(1068)*(v(208)*v(231)+v(210)*v(232)+v(212)*v(233))
       p(5)=p(5)+v(1068)*(v(213)*v(231)+v(214)*v(232)+v(215)*v(233))
       p(6)=p(6)+v(1068)*(v(217)*v(231)+v(219)*v(232)+v(221)*v(233))
       p(7)=p(7)+v(1068)*(v(222)*v(231)+v(223)*v(232)+v(224)*v(233))
       p(8)=p(8)+v(1068)*(v(226)*v(231)+v(228)*v(232)+v(230)*v(233))
       s(1,1)=s(1,1)+v(1068)*((v(195)*v(195))+(v(196)*v(196))+(v(197
     & )*v(197)))
       s(1,2)=s(1,2)+v(289)
       s(1,3)=s(1,3)+v(290)
       s(1,4)=s(1,4)+v(291)
       s(1,5)=s(1,5)+v(292)
       s(1,6)=s(1,6)+v(293)
       s(1,7)=s(1,7)+v(294)
       s(1,8)=s(1,8)+v(295)
       s(2,1)=s(2,1)+v(289)
       s(2,2)=s(2,2)+v(1068)*((v(199)*v(199))+(v(201)*v(201))+(v(203
     & )*v(203)))
       s(2,3)=s(2,3)+v(297)
       s(2,4)=s(2,4)+v(298)
       s(2,5)=s(2,5)+v(299)
       s(2,6)=s(2,6)+v(300)
       s(2,7)=s(2,7)+v(301)
       s(2,8)=s(2,8)+v(302)
       s(3,1)=s(3,1)+v(290)
       s(3,2)=s(3,2)+v(297)
       s(3,3)=s(3,3)+v(1068)*((v(204)*v(204))+(v(205)*v(205))+(v(206
     & )*v(206)))
       s(3,4)=s(3,4)+v(304)
       s(3,5)=s(3,5)+v(305)
       s(3,6)=s(3,6)+v(306)
       s(3,7)=s(3,7)+v(307)
       s(3,8)=s(3,8)+v(308)
       s(4,1)=s(4,1)+v(291)
       s(4,2)=s(4,2)+v(298)
       s(4,3)=s(4,3)+v(304)
       s(4,4)=s(4,4)+v(1068)*((v(208)*v(208))+(v(210)*v(210))+(v(212
     & )*v(212)))
       s(4,5)=s(4,5)+v(310)
       s(4,6)=s(4,6)+v(311)
       s(4,7)=s(4,7)+v(312)
       s(4,8)=s(4,8)+v(313)
       s(5,1)=s(5,1)+v(292)
       s(5,2)=s(5,2)+v(299)
       s(5,3)=s(5,3)+v(305)
       s(5,4)=s(5,4)+v(310)
       s(5,5)=s(5,5)+v(1068)*((v(213)*v(213))+(v(214)*v(214))+(v(215
     & )*v(215)))
       s(5,6)=s(5,6)+v(315)
       s(5,7)=s(5,7)+v(316)
       s(5,8)=s(5,8)+v(317)
       s(6,1)=s(6,1)+v(293)
       s(6,2)=s(6,2)+v(300)
       s(6,3)=s(6,3)+v(306)
       s(6,4)=s(6,4)+v(311)
       s(6,5)=s(6,5)+v(315)
       s(6,6)=s(6,6)+v(1068)*((v(217)*v(217))+(v(219)*v(219))+(v(221
     & )*v(221)))
       s(6,7)=s(6,7)+v(319)
       s(6,8)=s(6,8)+v(320)
       s(7,1)=s(7,1)+v(294)
       s(7,2)=s(7,2)+v(301)
       s(7,3)=s(7,3)+v(307)
       s(7,4)=s(7,4)+v(312)
       s(7,5)=s(7,5)+v(316)
       s(7,6)=s(7,6)+v(319)
       s(7,7)=s(7,7)+v(1068)*((v(222)*v(222))+(v(223)*v(223))+(v(224
     & )*v(224)))
       s(7,8)=s(7,8)+v(322)
       s(8,1)=s(8,1)+v(295)
       s(8,2)=s(8,2)+v(302)
       s(8,3)=s(8,3)+v(308)
       s(8,4)=s(8,4)+v(313)
       s(8,5)=s(8,5)+v(317)
       s(8,6)=s(8,6)+v(320)
       s(8,7)=s(8,7)+v(322)
       s(8,8)=s(8,8)+v(1068)*((v(226)*v(226))+(v(228)*v(228))+(v(230
     & )*v(230)))
       c(1,1)=0d0+c(1,1)
       c(1,2)=0d0+c(1,2)
       c(1,3)=0d0+c(1,3)
       c(1,4)=0d0+c(1,4)
       c(1,5)=0d0+c(1,5)
       c(1,6)=0d0+c(1,6)
       c(1,7)=0d0+c(1,7)
       c(1,8)=0d0+c(1,8)
       c(2,1)=0d0+c(2,1)
       c(2,2)=0d0+c(2,2)
       c(2,3)=0d0+c(2,3)
       c(2,4)=0d0+c(2,4)
       c(2,5)=0d0+c(2,5)
       c(2,6)=0d0+c(2,6)
       c(2,7)=0d0+c(2,7)
       c(2,8)=0d0+c(2,8)
       c(3,1)=0d0+c(3,1)
       c(3,2)=0d0+c(3,2)
       c(3,3)=0d0+c(3,3)
       c(3,4)=0d0+c(3,4)
       c(3,5)=0d0+c(3,5)
       c(3,6)=0d0+c(3,6)
       c(3,7)=0d0+c(3,7)
       c(3,8)=0d0+c(3,8)
       c(4,1)=0d0+c(4,1)
       c(4,2)=0d0+c(4,2)
       c(4,3)=0d0+c(4,3)
       c(4,4)=0d0+c(4,4)
       c(4,5)=0d0+c(4,5)
       c(4,6)=0d0+c(4,6)
       c(4,7)=0d0+c(4,7)
       c(4,8)=0d0+c(4,8)
       c(5,1)=0d0+c(5,1)
       c(5,2)=0d0+c(5,2)
       c(5,3)=0d0+c(5,3)
       c(5,4)=0d0+c(5,4)
       c(5,5)=0d0+c(5,5)
       c(5,6)=0d0+c(5,6)
       c(5,7)=0d0+c(5,7)
       c(5,8)=0d0+c(5,8)
       c(6,1)=0d0+c(6,1)
       c(6,2)=0d0+c(6,2)
       c(6,3)=0d0+c(6,3)
       c(6,4)=0d0+c(6,4)
       c(6,5)=0d0+c(6,5)
       c(6,6)=0d0+c(6,6)
       c(6,7)=0d0+c(6,7)
       c(6,8)=0d0+c(6,8)
       c(7,1)=0d0+c(7,1)
       c(7,2)=0d0+c(7,2)
       c(7,3)=0d0+c(7,3)
       c(7,4)=0d0+c(7,4)
       c(7,5)=0d0+c(7,5)
       c(7,6)=0d0+c(7,6)
       c(7,7)=0d0+c(7,7)
       c(7,8)=0d0+c(7,8)
       c(8,1)=0d0+c(8,1)
       c(8,2)=0d0+c(8,2)
       c(8,3)=0d0+c(8,3)
       c(8,4)=0d0+c(8,4)
       c(8,5)=0d0+c(8,5)
       c(8,6)=0d0+c(8,6)
       c(8,7)=0d0+c(8,7)
       c(8,8)=0d0+c(8,8)
       m(1,1)=0d0+m(1,1)
       m(1,2)=0d0+m(1,2)
       m(1,3)=0d0+m(1,3)
       m(1,4)=0d0+m(1,4)
       m(1,5)=0d0+m(1,5)
       m(1,6)=0d0+m(1,6)
       m(1,7)=0d0+m(1,7)
       m(1,8)=0d0+m(1,8)
       m(2,1)=0d0+m(2,1)
       m(2,2)=0d0+m(2,2)
       m(2,3)=0d0+m(2,3)
       m(2,4)=0d0+m(2,4)
       m(2,5)=0d0+m(2,5)
       m(2,6)=0d0+m(2,6)
       m(2,7)=0d0+m(2,7)
       m(2,8)=0d0+m(2,8)
       m(3,1)=0d0+m(3,1)
       m(3,2)=0d0+m(3,2)
       m(3,3)=0d0+m(3,3)
       m(3,4)=0d0+m(3,4)
       m(3,5)=0d0+m(3,5)
       m(3,6)=0d0+m(3,6)
       m(3,7)=0d0+m(3,7)
       m(3,8)=0d0+m(3,8)
       m(4,1)=0d0+m(4,1)
       m(4,2)=0d0+m(4,2)
       m(4,3)=0d0+m(4,3)
       m(4,4)=0d0+m(4,4)
       m(4,5)=0d0+m(4,5)
       m(4,6)=0d0+m(4,6)
       m(4,7)=0d0+m(4,7)
       m(4,8)=0d0+m(4,8)
       m(5,1)=0d0+m(5,1)
       m(5,2)=0d0+m(5,2)
       m(5,3)=0d0+m(5,3)
       m(5,4)=0d0+m(5,4)
       m(5,5)=0d0+m(5,5)
       m(5,6)=0d0+m(5,6)
       m(5,7)=0d0+m(5,7)
       m(5,8)=0d0+m(5,8)
       m(6,1)=0d0+m(6,1)
       m(6,2)=0d0+m(6,2)
       m(6,3)=0d0+m(6,3)
       m(6,4)=0d0+m(6,4)
       m(6,5)=0d0+m(6,5)
       m(6,6)=0d0+m(6,6)
       m(6,7)=0d0+m(6,7)
       m(6,8)=0d0+m(6,8)
       m(7,1)=0d0+m(7,1)
       m(7,2)=0d0+m(7,2)
       m(7,3)=0d0+m(7,3)
       m(7,4)=0d0+m(7,4)
       m(7,5)=0d0+m(7,5)
       m(7,6)=0d0+m(7,6)
       m(7,7)=0d0+m(7,7)
       m(7,8)=0d0+m(7,8)
       m(8,1)=0d0+m(8,1)
       m(8,2)=0d0+m(8,2)
       m(8,3)=0d0+m(8,3)
       m(8,4)=0d0+m(8,4)
       m(8,5)=0d0+m(8,5)
       m(8,6)=0d0+m(8,6)
       m(8,7)=0d0+m(8,7)
       m(8,8)=0d0+m(8,8)
      ENDDO
      END

!******************* S U B R O U T I N E **********************
      SUBROUTINE elmt23_ISW05(v,d,xl,ul,m,p,ht,hp,gp,ngpo)
      IMPLICIT NONE
      include 'sms.h'
      INTEGER ngpo,i327
      DOUBLE PRECISION v(1258),d(3),xl(3,8),ul(6,8),m(8,8),p
     &(8),ht(0),hp(0),gp(4,8)
      DO i327=1,ngpo
       m(1,1)=0d0+m(1,1)
       m(1,2)=0d0+m(1,2)
       m(1,3)=0d0+m(1,3)
       m(1,4)=0d0+m(1,4)
       m(1,5)=0d0+m(1,5)
       m(1,6)=0d0+m(1,6)
       m(1,7)=0d0+m(1,7)
       m(1,8)=0d0+m(1,8)
       m(2,1)=0d0+m(2,1)
       m(2,2)=0d0+m(2,2)
       m(2,3)=0d0+m(2,3)
       m(2,4)=0d0+m(2,4)
       m(2,5)=0d0+m(2,5)
       m(2,6)=0d0+m(2,6)
       m(2,7)=0d0+m(2,7)
       m(2,8)=0d0+m(2,8)
       m(3,1)=0d0+m(3,1)
       m(3,2)=0d0+m(3,2)
       m(3,3)=0d0+m(3,3)
       m(3,4)=0d0+m(3,4)
       m(3,5)=0d0+m(3,5)
       m(3,6)=0d0+m(3,6)
       m(3,7)=0d0+m(3,7)
       m(3,8)=0d0+m(3,8)
       m(4,1)=0d0+m(4,1)
       m(4,2)=0d0+m(4,2)
       m(4,3)=0d0+m(4,3)
       m(4,4)=0d0+m(4,4)
       m(4,5)=0d0+m(4,5)
       m(4,6)=0d0+m(4,6)
       m(4,7)=0d0+m(4,7)
       m(4,8)=0d0+m(4,8)
       m(5,1)=0d0+m(5,1)
       m(5,2)=0d0+m(5,2)
       m(5,3)=0d0+m(5,3)
       m(5,4)=0d0+m(5,4)
       m(5,5)=0d0+m(5,5)
       m(5,6)=0d0+m(5,6)
       m(5,7)=0d0+m(5,7)
       m(5,8)=0d0+m(5,8)
       m(6,1)=0d0+m(6,1)
       m(6,2)=0d0+m(6,2)
       m(6,3)=0d0+m(6,3)
       m(6,4)=0d0+m(6,4)
       m(6,5)=0d0+m(6,5)
       m(6,6)=0d0+m(6,6)
       m(6,7)=0d0+m(6,7)
       m(6,8)=0d0+m(6,8)
       m(7,1)=0d0+m(7,1)
       m(7,2)=0d0+m(7,2)
       m(7,3)=0d0+m(7,3)
       m(7,4)=0d0+m(7,4)
       m(7,5)=0d0+m(7,5)
       m(7,6)=0d0+m(7,6)
       m(7,7)=0d0+m(7,7)
       m(7,8)=0d0+m(7,8)
       m(8,1)=0d0+m(8,1)
       m(8,2)=0d0+m(8,2)
       m(8,3)=0d0+m(8,3)
       m(8,4)=0d0+m(8,4)
       m(8,5)=0d0+m(8,5)
       m(8,6)=0d0+m(8,6)
       m(8,7)=0d0+m(8,7)
       m(8,8)=0d0+m(8,8)
      ENDDO
      END

!******************* S U B R O U T I N E **********************
      SUBROUTINE elmt23_ISW06(v,d,xl,ul,p,ht,hp,gp,ngpo)
      IMPLICIT NONE
      include 'sms.h'
      INTEGER ngpo,i573
      DOUBLE PRECISION v(1258),d(3),xl(3,8),ul(6,8),p(8),ht
     &(0),hp(0),gp(4,8)
      v(656)=ul(1,8)
      v(655)=ul(1,7)
      v(654)=ul(1,6)
      v(653)=ul(1,5)
      v(652)=ul(1,4)
      v(651)=ul(1,3)
      v(650)=ul(1,2)
      v(649)=ul(1,1)
      v(600)=xl(3,8)
      v(599)=xl(2,8)
      v(598)=xl(1,8)
      v(597)=xl(3,7)
      v(1136)=v(597)-v(600)
      v(596)=xl(2,7)
      v(1140)=v(596)-v(599)
      v(595)=xl(1,7)
      v(1144)=v(595)-v(598)
      v(594)=xl(3,6)
      v(1124)=v(594)-v(597)
      v(593)=xl(2,6)
      v(1128)=v(593)-v(596)
      v(592)=xl(1,6)
      v(1132)=v(592)-v(595)
      v(591)=xl(3,5)
      v(1135)=-v(591)+v(594)
      v(1123)=v(591)-v(600)
      v(590)=xl(2,5)
      v(1139)=-v(590)+v(593)
      v(1127)=v(590)-v(599)
      v(589)=xl(1,5)
      v(1143)=-v(589)+v(592)
      v(1131)=v(589)-v(598)
      v(588)=xl(3,4)
      v(1112)=v(588)-v(600)
      v(587)=xl(2,4)
      v(1116)=v(587)-v(599)
      v(586)=xl(1,4)
      v(1120)=v(586)-v(598)
      v(585)=xl(3,3)
      v(1134)=v(585)-v(588)
      v(1111)=v(585)-v(597)
      v(584)=xl(2,3)
      v(1138)=v(584)-v(587)
      v(1115)=v(584)-v(596)
      v(583)=xl(1,3)
      v(1142)=v(583)-v(586)
      v(1119)=v(583)-v(595)
      v(582)=xl(3,2)
      v(1122)=v(582)-v(585)
      v(1110)=v(582)-v(594)
      v(581)=xl(2,2)
      v(1126)=v(581)-v(584)
      v(1114)=v(581)-v(593)
      v(580)=xl(1,2)
      v(1130)=v(580)-v(583)
      v(1118)=v(580)-v(592)
      v(579)=xl(3,1)
      v(1133)=-v(579)+v(582)
      v(1121)=v(579)-v(588)
      v(1109)=v(579)-v(591)
      v(578)=xl(2,1)
      v(1137)=-v(578)+v(581)
      v(1125)=v(578)-v(587)
      v(1113)=v(578)-v(590)
      v(577)=xl(1,1)
      v(1141)=-v(577)+v(580)
      v(1129)=v(577)-v(586)
      v(1117)=v(577)-v(589)
      DO i573=1,ngpo
       v(673)=gp(1,i573)
       v(684)=1d0-v(673)
       v(680)=1d0+v(673)
       v(674)=gp(2,i573)
       v(690)=1d0+v(674)
       v(699)=v(690)/8d0
       v(707)=-(v(684)*v(699))
       v(706)=-(v(680)*v(699))
       v(686)=1d0-v(674)
       v(700)=v(686)/8d0
       v(705)=-(v(680)*v(700))
       v(703)=-(v(684)*v(700))
       v(718)=v(1109)*v(703)+v(1110)*v(705)+v(1111)*v(706)+v(1112)*v
     & (707)
       v(715)=v(1113)*v(703)+v(1114)*v(705)+v(1115)*v(706)+v(1116)*v
     & (707)
       v(712)=v(1117)*v(703)+v(1118)*v(705)+v(1119)*v(706)+v(1120)*v
     & (707)
       v(675)=gp(3,i573)
       v(698)=(1d0+v(675))/8d0
       v(709)=-(v(680)*v(698))
       v(708)=-(v(684)*v(698))
       v(693)=v(690)*v(698)
       v(688)=v(686)*v(698)
       v(701)=(1d0-v(675))/8d0
       v(704)=-(v(680)*v(701))
       v(702)=-(v(684)*v(701))
       v(717)=v(1121)*v(702)+v(1122)*v(704)+v(1123)*v(708)+v(1124)*v
     & (709)
       v(714)=v(1125)*v(702)+v(1126)*v(704)+v(1127)*v(708)+v(1128)*v
     & (709)
       v(1105)=-(v(715)*v(717))+v(714)*v(718)
       v(711)=v(1129)*v(702)+v(1130)*v(704)+v(1131)*v(708)+v(1132)*v
     & (709)
       v(683)=v(690)*v(701)
       v(678)=v(686)*v(701)
       v(716)=v(1133)*v(678)+v(1134)*v(683)+v(1135)*v(688)+v(1136)*v
     & (693)
       v(713)=v(1137)*v(678)+v(1138)*v(683)+v(1139)*v(688)+v(1140)*v
     & (693)
       v(1107)=-(v(714)*v(716))+v(713)*v(717)
       v(1106)=v(715)*v(716)-v(713)*v(718)
       v(710)=v(1141)*v(678)+v(1142)*v(683)+v(1143)*v(688)+v(1144)*v
     & (693)
       v(719)=v(1105)*v(710)+v(1106)*v(711)+v(1107)*v(712)
       v(1108)=d(2)*gp(4,i573)*v(719)
       v(729)=-(v(1105)/v(719))
       v(792)=-(v(693)*v(729))
       v(783)=v(688)*v(729)
       v(774)=-(v(683)*v(729))
       v(765)=v(678)*v(729)
       v(730)=(-(v(712)*v(717))+v(711)*v(718))/v(719)
       v(794)=-(v(693)*v(730))
       v(785)=v(688)*v(730)
       v(776)=-(v(683)*v(730))
       v(767)=v(678)*v(730)
       v(731)=(v(712)*v(714)-v(711)*v(715))/v(719)
       v(796)=-(v(693)*v(731))
       v(787)=v(688)*v(731)
       v(778)=-(v(683)*v(731))
       v(769)=v(678)*v(731)
       v(732)=v(1106)/v(719)
       v(753)=v(701)*v(732)
       v(741)=v(698)*v(732)
       v(733)=(-(v(712)*v(716))+v(710)*v(718))/v(719)
       v(756)=v(701)*v(733)
       v(743)=v(698)*v(733)
       v(734)=(v(712)*v(713)-v(710)*v(715))/v(719)
       v(759)=v(701)*v(734)
       v(745)=v(698)*v(734)
       v(735)=v(1107)/v(719)
       v(754)=v(700)*v(735)
       v(747)=v(699)*v(735)
       v(736)=(v(711)*v(716)-v(710)*v(717))/v(719)
       v(757)=v(700)*v(736)
       v(749)=v(699)*v(736)
       v(737)=(-(v(711)*v(713))+v(710)*v(714))/v(719)
       v(760)=v(700)*v(737)
       v(751)=v(699)*v(737)
       v(738)=v(741)+v(747)
       v(739)=v(743)+v(749)
       v(740)=v(745)+v(751)
       v(742)=-v(741)+v(754)
       v(744)=-v(743)+v(757)
       v(746)=-v(745)+v(760)
       v(748)=-v(747)+v(753)
       v(750)=-v(749)+v(756)
       v(752)=-v(751)+v(759)
       v(755)=-v(753)-v(754)
       v(758)=-v(756)-v(757)
       v(761)=-v(759)-v(760)
       v(762)=v(684)*v(755)+v(765)
       v(763)=v(684)*v(758)+v(767)
       v(764)=v(684)*v(761)+v(769)
       v(766)=v(680)*v(755)-v(765)
       v(768)=v(680)*v(758)-v(767)
       v(770)=v(680)*v(761)-v(769)
       v(771)=v(680)*v(748)+v(774)
       v(772)=v(680)*v(750)+v(776)
       v(773)=v(680)*v(752)+v(778)
       v(775)=v(684)*v(748)-v(774)
       v(777)=v(684)*v(750)-v(776)
       v(779)=v(684)*v(752)-v(778)
       v(780)=v(684)*v(742)+v(783)
       v(781)=v(684)*v(744)+v(785)
       v(782)=v(684)*v(746)+v(787)
       v(784)=v(680)*v(742)-v(783)
       v(786)=v(680)*v(744)-v(785)
       v(788)=v(680)*v(746)-v(787)
       v(789)=v(680)*v(738)+v(792)
       v(790)=v(680)*v(739)+v(794)
       v(791)=v(680)*v(740)+v(796)
       v(793)=v(684)*v(738)-v(792)
       v(798)=v(649)*v(762)+v(650)*v(766)+v(651)*v(771)+v(652)*v(775)
     & +v(653)*v(780)+v(654)*v(784)+v(655)*v(789)+v(656)*v(793)
       v(795)=v(684)*v(739)-v(794)
       v(799)=v(649)*v(763)+v(650)*v(768)+v(651)*v(772)+v(652)*v(777)
     & +v(653)*v(781)+v(654)*v(786)+v(655)*v(790)+v(656)*v(795)
       v(797)=v(684)*v(740)-v(796)
       v(800)=v(649)*v(764)+v(650)*v(770)+v(651)*v(773)+v(652)*v(779)
     & +v(653)*v(782)+v(654)*v(788)+v(655)*v(791)+v(656)*v(797)
       p(1)=p(1)+v(1108)*(v(762)*v(798)+v(763)*v(799)+v(764)*v(800))
       p(2)=p(2)+v(1108)*(v(766)*v(798)+v(768)*v(799)+v(770)*v(800))
       p(3)=p(3)+v(1108)*(v(771)*v(798)+v(772)*v(799)+v(773)*v(800))
       p(4)=p(4)+v(1108)*(v(775)*v(798)+v(777)*v(799)+v(779)*v(800))
       p(5)=p(5)+v(1108)*(v(780)*v(798)+v(781)*v(799)+v(782)*v(800))
       p(6)=p(6)+v(1108)*(v(784)*v(798)+v(786)*v(799)+v(788)*v(800))
       p(7)=p(7)+v(1108)*(v(789)*v(798)+v(790)*v(799)+v(791)*v(800))
       p(8)=p(8)+v(1108)*(v(793)*v(798)+v(795)*v(799)+v(797)*v(800))
      ENDDO
      END

!******************* S U B R O U T I N E **********************
      SUBROUTINE elmt23_ISW09(v,d,xl,ul,c,p,ht,hp,gp,ngpo)
      IMPLICIT NONE
      include 'sms.h'
      INTEGER ngpo,i819
      DOUBLE PRECISION v(1258),d(3),xl(3,8),ul(6,8),c(8,8),p
     &(8),ht(0),hp(0),gp(4,8)
      DO i819=1,ngpo
       c(1,1)=0d0+c(1,1)
       c(1,2)=0d0+c(1,2)
       c(1,3)=0d0+c(1,3)
       c(1,4)=0d0+c(1,4)
       c(1,5)=0d0+c(1,5)
       c(1,6)=0d0+c(1,6)
       c(1,7)=0d0+c(1,7)
       c(1,8)=0d0+c(1,8)
       c(2,1)=0d0+c(2,1)
       c(2,2)=0d0+c(2,2)
       c(2,3)=0d0+c(2,3)
       c(2,4)=0d0+c(2,4)
       c(2,5)=0d0+c(2,5)
       c(2,6)=0d0+c(2,6)
       c(2,7)=0d0+c(2,7)
       c(2,8)=0d0+c(2,8)
       c(3,1)=0d0+c(3,1)
       c(3,2)=0d0+c(3,2)
       c(3,3)=0d0+c(3,3)
       c(3,4)=0d0+c(3,4)
       c(3,5)=0d0+c(3,5)
       c(3,6)=0d0+c(3,6)
       c(3,7)=0d0+c(3,7)
       c(3,8)=0d0+c(3,8)
       c(4,1)=0d0+c(4,1)
       c(4,2)=0d0+c(4,2)
       c(4,3)=0d0+c(4,3)
       c(4,4)=0d0+c(4,4)
       c(4,5)=0d0+c(4,5)
       c(4,6)=0d0+c(4,6)
       c(4,7)=0d0+c(4,7)
       c(4,8)=0d0+c(4,8)
       c(5,1)=0d0+c(5,1)
       c(5,2)=0d0+c(5,2)
       c(5,3)=0d0+c(5,3)
       c(5,4)=0d0+c(5,4)
       c(5,5)=0d0+c(5,5)
       c(5,6)=0d0+c(5,6)
       c(5,7)=0d0+c(5,7)
       c(5,8)=0d0+c(5,8)
       c(6,1)=0d0+c(6,1)
       c(6,2)=0d0+c(6,2)
       c(6,3)=0d0+c(6,3)
       c(6,4)=0d0+c(6,4)
       c(6,5)=0d0+c(6,5)
       c(6,6)=0d0+c(6,6)
       c(6,7)=0d0+c(6,7)
       c(6,8)=0d0+c(6,8)
       c(7,1)=0d0+c(7,1)
       c(7,2)=0d0+c(7,2)
       c(7,3)=0d0+c(7,3)
       c(7,4)=0d0+c(7,4)
       c(7,5)=0d0+c(7,5)
       c(7,6)=0d0+c(7,6)
       c(7,7)=0d0+c(7,7)
       c(7,8)=0d0+c(7,8)
       c(8,1)=0d0+c(8,1)
       c(8,2)=0d0+c(8,2)
       c(8,3)=0d0+c(8,3)
       c(8,4)=0d0+c(8,4)
       c(8,5)=0d0+c(8,5)
       c(8,6)=0d0+c(8,6)
       c(8,7)=0d0+c(8,7)
       c(8,8)=0d0+c(8,8)
      ENDDO
      END
